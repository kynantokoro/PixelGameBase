local CLEAR_COLOR = hash("clear_color")
local SET_VIEW_PROJECTION = hash("set_view_projection")
local SET_UPSCALE_MATERIAL = hash("set_upscale_material")
local SET_SCALE_SNAP = hash("set_scale_snap")
local TOGGLE_SCALE_SNAP = hash("toggle_scale_snap")
local SET_SIZE = hash("set_size")

-- this is equal to vmath.matrix4_orthographic(-1, 1, -1, 1, -1, 1) 
local IDENTITY = vmath.matrix4()

local constants = require "main.constants"
local coords = require "render.utils"
local camera = require "render.camera"

local function setup(self, width, height)
	self.width = width
	self.height = height
	self.game_projection = vmath.matrix4_orthographic(0, width, 0, height, -1, 1)

	-- render target buffer parameters
	local color_params = {
		format = render.FORMAT_RGBA,
		width = width,
		height = height,
		min_filter = render.FILTER_NEAREST,
		mag_filter = render.FILTER_NEAREST,
		u_wrap = render.WRAP_CLAMP_TO_EDGE,
		v_wrap = render.WRAP_CLAMP_TO_EDGE
	}
	local depth_params = {
		format = render.FORMAT_DEPTH,
		width = width,
		height = height,
		u_wrap = render.WRAP_CLAMP_TO_EDGE,
		v_wrap = render.WRAP_CLAMP_TO_EDGE,
		flags = render.TEXTURE_BIT
	}
	if self.rt then
		render.delete_render_target(self.rt)
	end
	self.rt = render.render_target("game_render_target", {
		[render.BUFFER_COLOR_BIT] = color_params,
		[render.BUFFER_DEPTH_BIT] = depth_params,
	})
end

function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})
	self.game_render_target_pred = render.predicate({"game_render_target"})
	self.window_gui_pred = render.predicate({"window_gui"})
	self.window_tile_pred = render.predicate({"window_tile"})

	self.view = IDENTITY

	setup(self, constants.GAME_WIDTH, constants.GAME_HEIGHT)

	local clear_color = vmath.vector4(0, 0, 0, 0)
	clear_color.x = sys.get_config("render.clear_color_red", 0)
	clear_color.y = sys.get_config("render.clear_color_green", 0)
	clear_color.z = sys.get_config("render.clear_color_blue", 0)
	clear_color.w = sys.get_config("render.clear_color_alpha", 0)
	self.clear_buffers = {
		[render.BUFFER_COLOR_BIT] = clear_color,
		[render.BUFFER_DEPTH_BIT] = 1,
		[render.BUFFER_STENCIL_BIT] = 0
	}

	self.upscale_material = hash("game_render_target")
	self.scale_snap = true
	coords.scale_snap = true
	local window_width = render.get_window_width()
	local window_height = render.get_window_height()
	coords.window_width, coords.window_height = window_width, window_height
end


local function clear(self, w, h)
	-- clear
	render.set_view(IDENTITY)
	render.set_projection(vmath.matrix4_orthographic(0, w, 0, h, -1, 1))
	render.set_depth_mask(true)
	render.set_stencil_mask(0xff)
	render.clear(self.clear_buffers)
end


local function draw_game(self)
	clear(self, render.get_window_width(), render.get_window_height())

	render.set_viewport(0, 0, self.width, self.height)

	-- draw world (sprites, tiles, pfx etc)
	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.disable_state(render.STATE_CULL_FACE)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	for _,camera_id in ipairs(camera.get_cameras()) do
		local view = camera.get_view(camera_id)
		render.set_view(view)
		local projection = camera.get_projection(camera_id)
		render.set_projection(projection)
		local frustum = projection * view
		render.draw(self.tile_pred, { frustum = frustum })
		render.draw(self.particle_pred, { frustum = frustum })
		render.draw_debug3d()

		-- draw screen space gui
		render.set_view(vmath.matrix4())
		render.set_projection(projection)
		render.enable_state(render.STATE_STENCIL_TEST)
		render.draw(self.gui_pred)
		render.draw(self.text_pred)
		render.disable_state(render.STATE_STENCIL_TEST)
	end
end


local function draw_upscaled(self)
	-- calculate zoom
	local window_width = render.get_window_width()
	local window_height = render.get_window_height()
	local zoom = math.min(window_width / self.width, window_height / self.height)
	if self.scale_snap then zoom = math.max(1, math.floor(zoom)) end

	-- positioning
	local width = self.width * zoom
	local height = self.height * zoom
	local offsetx = (window_width - width) / 2
	local offsety = (window_height - height) / 2

	-- draw!
	render.disable_state(render.STATE_BLEND)
	render.set_viewport(offsetx, offsety, width, height)
	-- set to vmath.matrix4_orthographic(-1.2, 0.8, -1, 1, -1, 1) 
	-- for 2x zoom and slightly left
	render.set_view(IDENTITY)
	-- set to vmath.matrix4_orthographic(-1.5, 0.5, -1.5, 0.5, -1, 1) 
	-- for 2x zoom
	render.set_projection(IDENTITY)
	render.enable_texture(0, self.rt, render.BUFFER_COLOR_BIT)
	render.enable_material(self.upscale_material)
	render.draw(self.game_render_target_pred)
	render.disable_material()
	render.disable_texture(0)
end

-- draw on window resolution
local function draw_to_window(self)
	render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
	render.set_view(IDENTITY)
	render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

	render.enable_state(render.STATE_BLEND)
	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.window_gui_pred)
	render.draw(self.window_tile_pred)
	render.disable_state(render.STATE_BLEND)
	render.disable_state(render.STATE_STENCIL_TEST)
end

function update(self)
	local window_width = render.get_window_width()
	local window_height = render.get_window_height()
	coords.window_width, coords.window_height = window_width, window_height
	clear(self, window_width, window_height)
	render.enable_render_target(self.rt)
	draw_game(self)
	render.disable_render_target(self.rt)
	draw_upscaled(self)
	draw_to_window(self)
end

function on_message(self, message_id, message)
	if message_id == CLEAR_COLOR then
		self.clear_buffers[render.BUFFER_COLOR_BIT] = message.color
	elseif message_id == SET_VIEW_PROJECTION then
		self.view = message.view
	elseif message_id == SET_UPSCALE_MATERIAL then
		self.upscale_material = message.material
	elseif message_id == TOGGLE_SCALE_SNAP then
		if self.scale_snap then
			self.scale_snap = false
		else
			self.scale_snap = true
		end
		coords.scale_snap = self.scale_snap
	elseif message_id == SET_SCALE_SNAP then
		self.scale_snap = message.scale_snap
		coords.scale_snap = message.snap
	elseif message_id == SET_SIZE then
		setup(self, message.width, message.height)
	end
end
